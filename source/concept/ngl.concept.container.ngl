
//fichier A
    ngl:cluster my_module

    ngl:concept truc
//fichier B
    ngl:cluster my_module

// lib
(A, B) -> cluster truc
cluster truc -> (A, B)

// crypto



ngl data
{
    ngl:storage <storage>
}

ngl:data concept
{
    ngl:storage
}

ngl::concept container
{
    .storage ngl:storage:heap
    <ngl:data> data_type // data to store
}

ngl:concept:container matrix // data_type unknown, has to be define in current context
{
    ngl:concept:number <rows>
    ngl:concept:number <columns>
    ngl::concept:size ( rows * columns )

    <data_type> .data // redescription
}

// meta concept
ngl meta
{
    ngl:concept <concept>
}

// non-intrusive version
ngl:meta<ngc:matrix> meta_matrix
{
    ngl:branch
    {
        (^.size > 8000) ^.storage ngl:storage:dynamic
        ^..storage ngl:storage:static // <=> meta.concept.storage ngl:storage:static // concept is deduced
    }
}


// concrete
matrix<4, 4, ngl:float> concrete_matrix;

graph<[int, bool, char]>

ngl:concept:container variant
{
    <ngc:array<ngl:concept:type>> concepts
    // <[ngl:concept | ngc:number]> types
}

ngc array
{
    <element_type> element
    ngc::int <size>
}
ngc:array<ngc::int, 20>